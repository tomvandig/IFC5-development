/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ifc/v5a/dummy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["dummy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ifc/v5a/layers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LayersApi_list"];
        put: operations["LayersApi_update"];
        post: operations["LayersApi_create"];
        delete: operations["LayersApi_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ifc/v5a/layers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LayerApi_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ifc/v5a/layers/{id}/push": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["LayerApi_push"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ifc/v5a/layers/{id}/revisions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LayerApi_revisions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ifc/v5a/layers/{id}/{revision}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LayerHistory_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ifc/v5a/layers/{id}/{revision}/ifcx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LayerHistory_ifcx"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ifc/v5a/layers/{id}/{revision}/tree/*": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LayerHistory_tree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ArrayRestrictions: {
            min?: number;
            max?: number;
            value: components["schemas"]["IfcxValueDescription"];
        };
        /** @enum {string} */
        DataType: "Real" | "Boolean" | "Integer" | "String" | "DateTime" | "Enum" | "Array" | "Object" | "Relation";
        EnumRestrictions: {
            options: string[];
        };
        FederatedLayerRevision: {
            layerID: string;
            hash: string;
        };
        IfcxFile: {
            header: components["schemas"]["IfcxHeader"];
            schemas: {
                [key: string]: components["schemas"]["IfcxSchema"];
            };
            data: components["schemas"]["IfcxNode"][];
        };
        IfcxHeader: {
            version: string;
            author: string;
            timestamp: string;
        };
        IfcxNode: {
            identifier: components["schemas"]["path"];
            children?: {
                [key: string]: string | null;
            };
            inherits?: {
                [key: string]: string | null;
            };
            attributes?: {
                [key: string]: unknown;
            };
        };
        IfcxSchema: {
            uri?: string;
            value: components["schemas"]["IfcxValueDescription"];
        };
        IfcxValueDescription: {
            dataType: components["schemas"]["DataType"];
            inherits?: string[];
            quantityKind?: components["schemas"]["QuantityKind"];
            enumRestrictions?: components["schemas"]["EnumRestrictions"];
            arrayRestrictions?: components["schemas"]["ArrayRestrictions"];
            objectRestrictions?: components["schemas"]["ObjectRestrictions"];
            relationRestrictions?: components["schemas"]["RelationRestrictions"];
        };
        LayerCreateCommand: {
            id: string;
            name: string;
            federatedLayers: components["schemas"]["FederatedLayerRevision"][];
        };
        LayerDeleteCommand: {
            id: string;
        };
        LayerResponse: {
            id: string;
            name: string;
            head: components["schemas"]["LayerRevision"];
            federatedLayers: components["schemas"]["FederatedLayerRevision"][];
        };
        LayerRevision: {
            hash: string;
            origin?: components["schemas"]["FederatedLayerRevision"][];
        };
        LayerUpdateCommand: {
            id: string;
            name: string;
        };
        ObjectRestrictions: {
            values: {
                [key: string]: components["schemas"]["IfcxValueDescription"];
            };
        };
        /** @enum {string} */
        QuantityKind: "Plane angle" | "Thermodynamic temperature" | "Electric current" | "Time" | "Frequency" | "Mass" | "Length" | "Linear velocity" | "Force" | "Pressure" | "Area" | "Energy" | "Power" | "Volume";
        RelationRestrictions: {
            type: string;
        };
        path: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    dummy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IfcxFile"];
                };
            };
        };
    };
    LayersApi_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LayerResponse"][];
                };
            };
        };
    };
    LayersApi_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LayerUpdateCommand"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LayersApi_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LayerCreateCommand"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LayersApi_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LayerDeleteCommand"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LayerApi_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LayerResponse"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LayerApi_push: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LayerApi_revisions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LayerRevision"][];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LayerHistory_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                revision: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LayerRevision"];
                };
            };
        };
    };
    LayerHistory_ifcx: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                revision: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LayerHistory_tree: {
        parameters: {
            query: {
                recursive: boolean;
                collapse: boolean;
                compose: boolean;
            };
            header?: never;
            path: {
                id: string;
                revision: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IfcxNode"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
