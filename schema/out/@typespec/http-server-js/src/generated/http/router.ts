// Generated by Microsoft TypeSpec

import * as http from "node:http";

import * as serverRaw from "./operations/server-raw.js";

import { parseHeaderValueParameters } from "../helpers/header.js";

import { IfcxApi } from "../models/all/index.js";

import { LayersApi } from "../models/all/ifcx-api/index.js";

import { LayerApi } from "../models/all/ifcx-api/layers-api/index.js";

import { LayerHistory } from "../models/all/ifcx-api/layers-api/layer-api.js";

import {
  RouterOptions,
  createPolicyChain,
  createPolicyChainForRoute,
  HttpContext,
} from "../helpers/router.js";

export interface IfcxApiRouter {
  /**
   * Dispatches the request to the appropriate service based on the request path.
   *
   * This member function may be used directly as a handler for a Node HTTP server.
   *
   * @param request - The incoming HTTP request.
   * @param response - The outgoing HTTP response.
   */
  dispatch(request: http.IncomingMessage, response: http.ServerResponse): void;

  /**
   * An Express middleware function that dispatches the request to the appropriate service based on the request path.
   *
   * This member function may be used directly as an application-level middleware function in an Express app.
   *
   * If the router does not match a route, it will call the `next` middleware registered with the application,
   * so it is sensible to insert this middleware at the beginning of the middleware stack.
   *
   * @param req - The incoming HTTP request.
   * @param res - The outgoing HTTP response.
   * @param next - The next middleware function in the stack.
   */
  expressMiddleware(
    req: http.IncomingMessage,
    res: http.ServerResponse,
    next: () => void,
  ): void;
}

export function createIfcxApiRouter(
  ifcxApi: IfcxApi,
  layersApi: LayersApi,
  layerApi: LayerApi,
  layerHistory: LayerHistory,
  options: RouterOptions<{
    ifcxApi: IfcxApi<HttpContext>;
    layersApi: LayersApi<HttpContext>;
    layerApi: LayerApi<HttpContext>;
    layerHistory: LayerHistory<HttpContext>;
  }> = {},
): IfcxApiRouter {
  const __onRequestNotFound_54 =
    options.onRequestNotFound ??
    ((ctx) => {
      ctx.response.statusCode = 404;
      ctx.response.setHeader("Content-Type", "text/plain");
      ctx.response.end("Not Found");
    });

  const __onInvalidRequest_55 =
    options.onInvalidRequest ??
    ((ctx, route, error) => {
      ctx.response.statusCode = 400;
      ctx.response.setHeader("Content-Type", "application/json");
      ctx.response.end(JSON.stringify({ error }));
    });

  const __onInternalError_56 =
    options.onInternalError ??
    ((ctx, error) => {
      ctx.response.statusCode = 500;
      ctx.response.setHeader("Content-Type", "text/plain");
      ctx.response.end("Internal server error.");
    });

  const __routePolicies_57 = options.routePolicies ?? {};

  const __routeHandlers_58 = {
    ifcx_api_dummy: createPolicyChainForRoute(
      "ifcxApiDummyDispatch",
      __routePolicies_57,
      "ifcxApi",
      "dummy",
      serverRaw.ifcx_api_dummy,
    ),
    layers_api_list: createPolicyChainForRoute(
      "layersApiListDispatch",
      __routePolicies_57,
      "layersApi",
      "list",
      serverRaw.layers_api_list,
    ),
    layers_api_create: createPolicyChainForRoute(
      "layersApiCreateDispatch",
      __routePolicies_57,
      "layersApi",
      "create",
      serverRaw.layers_api_create,
    ),
    layers_api_update: createPolicyChainForRoute(
      "layersApiUpdateDispatch",
      __routePolicies_57,
      "layersApi",
      "update",
      serverRaw.layers_api_update,
    ),
    layers_api_delete: createPolicyChainForRoute(
      "layersApiDeleteDispatch",
      __routePolicies_57,
      "layersApi",
      "delete",
      serverRaw.layers_api_delete,
    ),
    layer_api_get: createPolicyChainForRoute(
      "layerApiGetDispatch",
      __routePolicies_57,
      "layerApi",
      "get",
      serverRaw.layer_api_get,
    ),
    layer_api_revisions: createPolicyChainForRoute(
      "layerApiRevisionsDispatch",
      __routePolicies_57,
      "layerApi",
      "revisions",
      serverRaw.layer_api_revisions,
    ),
    layer_api_push: createPolicyChainForRoute(
      "layerApiPushDispatch",
      __routePolicies_57,
      "layerApi",
      "push",
      serverRaw.layer_api_push,
    ),
    layer_history_get: createPolicyChainForRoute(
      "layerHistoryGetDispatch",
      __routePolicies_57,
      "layerHistory",
      "get",
      serverRaw.layer_history_get,
    ),
    layer_history_ifcx: createPolicyChainForRoute(
      "layerHistoryIfcxDispatch",
      __routePolicies_57,
      "layerHistory",
      "ifcx",
      serverRaw.layer_history_ifcx,
    ),
    layer_history_tree: createPolicyChainForRoute(
      "layerHistoryTreeDispatch",
      __routePolicies_57,
      "layerHistory",
      "tree",
      serverRaw.layer_history_tree,
    ),
  } as const;

  const dispatch = createPolicyChain(
    "IfcxApiRouterDispatch",
    options.policies ?? [],
    async function (ctx, request, response) {
      const url = new URL(request.url!, `http://${request.headers.host}`);
      let path = url.pathname;

      if (path.length === 0) {
        return ctx.errorHandlers.onRequestNotFound(ctx);
      } else if (path.startsWith("/ifc/v5a/")) {
        path = path.slice(9);
        if (path.length === 0) {
          return ctx.errorHandlers.onRequestNotFound(ctx);
        } else if (path.startsWith("dummy")) {
          path = path.slice(5);
          if (path.length === 0) {
            switch (request.method) {
              case "GET":
                return __routeHandlers_58.ifcx_api_dummy(ctx, ifcxApi);
              default:
                return ctx.errorHandlers.onRequestNotFound(ctx);
            }
          } else {
            return ctx.errorHandlers.onRequestNotFound(ctx);
          }
        } else if (path.startsWith("layers")) {
          path = path.slice(6);
          if (path.length === 0) {
            switch (request.method) {
              case "GET":
                return __routeHandlers_58.layers_api_list(ctx, layersApi);
              case "POST":
                return __routeHandlers_58.layers_api_create(ctx, layersApi);
              case "PUT":
                return __routeHandlers_58.layers_api_update(ctx, layersApi);
              case "DELETE":
                return __routeHandlers_58.layers_api_delete(ctx, layersApi);
              default:
                return ctx.errorHandlers.onRequestNotFound(ctx);
            }
          } else if (path.startsWith("/")) {
            path = path.slice(1);
            if (path.length === 0) {
              return ctx.errorHandlers.onRequestNotFound(ctx);
            } else {
              let __id_idx = path.indexOf("/");
              __id_idx = __id_idx === -1 ? path.length : __id_idx;
              const id = path.slice(0, __id_idx);
              path = path.slice(__id_idx);
              if (path.length === 0) {
                switch (request.method) {
                  case "GET":
                    return __routeHandlers_58.layer_api_get(ctx, layerApi, id);
                  default:
                    return ctx.errorHandlers.onRequestNotFound(ctx);
                }
              } else if (path.startsWith("/")) {
                path = path.slice(1);
                if (path.length === 0) {
                  return ctx.errorHandlers.onRequestNotFound(ctx);
                } else if (path.startsWith("revisions")) {
                  path = path.slice(9);
                  if (path.length === 0) {
                    switch (request.method) {
                      case "GET":
                        return __routeHandlers_58.layer_api_revisions(
                          ctx,
                          layerApi,
                          id,
                        );
                      default:
                        return ctx.errorHandlers.onRequestNotFound(ctx);
                    }
                  } else {
                    return ctx.errorHandlers.onRequestNotFound(ctx);
                  }
                } else if (path.startsWith("push")) {
                  path = path.slice(4);
                  if (path.length === 0) {
                    switch (request.method) {
                      case "PUT":
                        return __routeHandlers_58.layer_api_push(
                          ctx,
                          layerApi,
                          id,
                        );
                      default:
                        return ctx.errorHandlers.onRequestNotFound(ctx);
                    }
                  } else {
                    return ctx.errorHandlers.onRequestNotFound(ctx);
                  }
                } else {
                  let __revision_idx = path.indexOf("/");
                  __revision_idx =
                    __revision_idx === -1 ? path.length : __revision_idx;
                  const revision = path.slice(0, __revision_idx);
                  path = path.slice(__revision_idx);
                  if (path.length === 0) {
                    switch (request.method) {
                      case "GET":
                        return __routeHandlers_58.layer_history_get(
                          ctx,
                          layerHistory,
                          id,
                          revision,
                        );
                      default:
                        return ctx.errorHandlers.onRequestNotFound(ctx);
                    }
                  } else if (path.startsWith("/")) {
                    path = path.slice(1);
                    if (path.length === 0) {
                      return ctx.errorHandlers.onRequestNotFound(ctx);
                    } else if (path.startsWith("ifcx")) {
                      path = path.slice(4);
                      if (path.length === 0) {
                        switch (request.method) {
                          case "GET":
                            return __routeHandlers_58.layer_history_ifcx(
                              ctx,
                              layerHistory,
                              id,
                              revision,
                            );
                          default:
                            return ctx.errorHandlers.onRequestNotFound(ctx);
                        }
                      } else {
                        return ctx.errorHandlers.onRequestNotFound(ctx);
                      }
                    } else if (path.startsWith("tree/*")) {
                      path = path.slice(6);
                      if (path.length === 0) {
                        switch (request.method) {
                          case "GET":
                            return __routeHandlers_58.layer_history_tree(
                              ctx,
                              layerHistory,
                              id,
                              revision,
                            );
                          default:
                            return ctx.errorHandlers.onRequestNotFound(ctx);
                        }
                      } else {
                        return ctx.errorHandlers.onRequestNotFound(ctx);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return ctx.errorHandlers.onRequestNotFound(ctx);
    },
  );

  const __errorHandlers_59 = {
    onRequestNotFound: __onRequestNotFound_54,
    onInvalidRequest: __onInvalidRequest_55,
    onInternalError: __onInternalError_56,
  };
  return {
    dispatch(request, response) {
      const ctx = { request, response, errorHandlers: __errorHandlers_59 };
      return dispatch(ctx, request, response).catch((e) =>
        __onInternalError_56(ctx, e),
      );
    },
    expressMiddleware: function (request, response, next) {
      const ctx = { request, response, errorHandlers: __errorHandlers_59 };
      void dispatch(
        {
          request,
          response,
          errorHandlers: {
            ...__errorHandlers_59,
            onRequestNotFound: function () {
              next();
            },
          },
        },
        request,
        response,
      ).catch((e) => __onInternalError_56(ctx, e));
    },
  };
}
